<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>feedback on Andrea&#39;s Blog</title>
    <link>https://andreahsu.github.io/tags/feedback/</link>
    <description>Recent content in feedback on Andrea&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Jul 2021 20:33:43 +0800</lastBuildDate><atom:link href="https://andreahsu.github.io/tags/feedback/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>心得:離散數學(大一上必) 韓永楷</title>
      <link>https://andreahsu.github.io/2021/discete_math/</link>
      <pubDate>Fri, 23 Jul 2021 20:33:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/discete_math/</guid>
      <description>課程走向: 老師有自己的ppt及講義，可以自己去印成一本紙本的講義(上課作筆記比較方便)，教授喜歡和學生互動，所以幾乎每次除了上正課，都還會有趣味小問答，不計分，純粹有趣，小問答內容大多也都跟上課提及的知識有關或延伸。
教授教得十分仔細，雖然英文授課，但內容跟表達都會講到讓學生懂，所以不用擔心英文授課聽不懂的問題，加上老師上課速度其實挺慢的，就是希望學生可以好好吸收每一次的內容。
但相較另一位蔡明哲教授開的離散數學，永楷教的內容比較少，然後比較簡單一點。 基本上離散數學就是高中延伸的排列組合跟機率，一些基礎數論，會提及一點圖論及專有名詞，
考試: 三次段考，因為永楷上的比較慢，所以每次的內容其實不會很難，每次大概都是6~7題，有一題加分題。
 分數計算有兩種，取較高的作為總成績的算法  一種是三次平均 一種是其中兩次最高的各40%，最低分的那次占20% 不調分，但給分真的很甜    心得: 覺得永楷真的很棒，就是可以學到東西又是一堂甜課，教授很親民，下課後若看到有學生聚在一起討論不解的地方，還會主動問學生有沒有需要解答的。 考試也是，若助教改的不合你意，可以跟助教和教授討論，只要你的論點說得通，那給分絕對不會小氣，而且助教跟教授即便面對這麼多學生要詢問考試一些批改的問題，都還是很有耐心而且很有禮貌，最後會讓學生了解其實該題是想考甚麼觀念阿，並檢討他們出題的方式，真的很喜歡這堂課的教授及助教，真的十分和善很喜歡。 考試也真的都是上課好好聽，內容有搞懂，基本上分數都不會難拿，是有投資有報酬的一科，考古題寫一寫，可以知道大概出題方向
 學到: 基本邏輯、數論、圖論概念，加上排列組合及機率 翹課: 可以，不點名，但有時候有趣他看到人比較少會加分  困境: 有一些比較tricky的觀念，要多想一下才能了解
方法:  寫考古 和同學討論  </description>
    </item>
    
    <item>
      <title>心得:軟體實驗設計(大二下必) 吳尚鴻</title>
      <link>https://andreahsu.github.io/2021/software/</link>
      <pubDate>Mon, 19 Jul 2021 12:59:48 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/software/</guid>
      <description>課程走向 上課是輔助，網路上有預先錄好的詳細教學影片，每周的影片時數很多，但十分詳細，每周都會釋出下一周的教學影片，老師實際上課時只提重點，細節要自己回去看影片。老師的投影片也做得非常詳細， 會介紹hmtl、css、javascript，會介紹業界常用的軟體跟debug工具
project 期末要做出一個 可以解決生活一個問題 的專題，期中報告前會先由助教和各組討論，不行的題目就會被打槍，要重想(幾乎每組都會被打槍)，最容易被問的問題也讓學生學習到，未來在開發一個專案或產品時，到底應該先考慮哪些
 真的有這個需求嗎?  那現在市場上就已經有&amp;hellip;.那這個我可以用&amp;hellip;甚麼功能取代你要做的東西，一樣可以達到功效阿   現有技術調查  那你們想解決的問題到底是甚麼，你們的產品跟現在市面上的&amp;hellip;有甚麼不一樣   功能不要太發散  一方面是怕做不完，一方面我們能確保整合性的產品功效真的做的會比focus在單一問題點上的現有產品還要好嗎?    此外，老師非常看中 user 介面、RWD響應式設計
考試   每周都有上機，是助教實際帶實作的部分，內容主要跟課程相搭，有時候是作業，前幾次期限通常是當天晚上12點，後面因為要完成的部分量比較多，所以期限通常是一星期之後;有時候是lab考試，規定在上機的兩小時要寫出來，但會視情況而定，有時候太難了就會改期限或改成作業(很彈性)。幾堂課之後，就會要求要分組，4人上限為組，lab後半學期的作業跟上機考幾乎都是以小組為單位，期中報告跟期末project也都是小組一起合作完成
  內容: 一開始會教導使用git，每周的作業跟上機模板也都是要從老師實驗室的gitlab clone下來，從基礎html，css，javascipt，並會教導引用一些boostrap的套件，後來會圍繞在建一個功能完整的天氣預報網站，引用api跟一些開放性資料，會搭配課程教導前端框架React，並使用後端DB postgres，還會deploy到AWS上，最後會提及一些機器學習
  分數:
  上機跟作業總佔比60%(除下來一次就是佔4%到5%)，期中提案報告與期末成果報告分數很重
  期中與期末:
會提前說需要報告哪些內容，評分由助教及老師給(給分很嚴)，只要有一項沒有報告到或不完整可能該項評分項目就會沒分數
期末會審視期中提案到底完成哪些，所以期中不能太浮誇XD若期末完成度不足會扣分
    心得 這是目前學到最多實作應用的課程，真的很棒，雖然loading很重，但每週課程好好跟，上機好好搞懂，不懂的語法或功能就多google，以前自學可能不知道有這麼多套件可以使用，也只會很基本的排版阿，透過每一次上機的作業及考試，也會更知道有哪些技術可以使用，尤其在最後final project的時候，自己實作時會去google及debug，更提升解決問題的能力。實際做出一個真的可以用的東西真的會讓成就感及動力滿滿。 此外，和他人的溝通合作能力也很重要，不論是作業、lab、final project都需要小組協作，而一組之內一定有carry隊友跟被carry的隊友，但大家要各司其職，不要起紛爭才是最重要的。
  學到javascript、react、css、nodejs&amp;hellip;前後端相關技術，以及溝通能力，收穫滿滿。
  翹課:可以，他不管，但損失的真的會是自己。
  困境  每次的lab助教都匯給模板code，要自己改寫並完成他規定的幾個要求/功能，因為還不是很會trace code，所以很常盯著程式碼發呆 一樣，有一群已經優相關開發經驗的同學，在這方面就寫得很快，可能他們1個小時解決，我要寫3天 語法或很多功能其實幾個函示就解決，但因為不知道，上課也沒提到，所以要花很多時間去google，找解答 final project發想主題其實會發現不簡單，因為市場調查跟現有技術大多都已經存在了，一個好的idea真的是從日常生活細微觀察而得來 有時候即使老師講過，但都是聽聽而已，對實際給一個題目要實作仍然無法馬上知道要從哪裡下手  方法  同學就是寶藏，多問多看，身邊的電神朋友一定會很願意給予方向 多google，學習如何下關鍵字 多觀察生活周遭，對生活事物敏銳，多接觸科技新知 要學會如何看錯誤訊息，console.</description>
    </item>
    
    <item>
      <title>心得:邏輯設計(大一下必) 麥偉基</title>
      <link>https://andreahsu.github.io/2021/01/</link>
      <pubDate>Mon, 19 Jul 2021 10:29:27 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/01/</guid>
      <description>課程走向: 考試: 心得: 困境: 方法: </description>
    </item>
    
  </channel>
</rss>
