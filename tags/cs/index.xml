<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs on Andrea&#39;s Blog</title>
    <link>https://andreahsu.github.io/tags/cs/</link>
    <description>Recent content in cs on Andrea&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Jul 2021 20:33:43 +0800</lastBuildDate><atom:link href="https://andreahsu.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>心得:離散數學(大一上必) 韓永楷</title>
      <link>https://andreahsu.github.io/2021/discete_math/</link>
      <pubDate>Fri, 23 Jul 2021 20:33:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/discete_math/</guid>
      <description>課程走向: 老師有自己的ppt及講義，可以自己去印成一本紙本的講義(上課作筆記比較方便)，教授喜歡和學生互動，所以幾乎每次除了上正課，都還會有趣味小問答，不計分，純粹有趣，小問答內容大多也都跟上課提及的知識有關或延伸。
教授教得十分仔細，雖然英文授課，但內容跟表達都會講到讓學生懂，所以不用擔心英文授課聽不懂的問題，加上老師上課速度其實挺慢的，就是希望學生可以好好吸收每一次的內容。
但相較另一位蔡明哲教授開的離散數學，永楷教的內容比較少，然後比較簡單一點。 基本上離散數學就是高中延伸的排列組合跟機率，一些基礎數論，會提及一點圖論及專有名詞，
考試: 三次段考，因為永楷上的比較慢，所以每次的內容其實不會很難，每次大概都是6~7題，有一題加分題。
 分數計算有兩種，取較高的作為總成績的算法  一種是三次平均 一種是其中兩次最高的各40%，最低分的那次占20% 不調分，但給分真的很甜    心得: 覺得永楷真的很棒，就是可以學到東西又是一堂甜課，教授很親民，下課後若看到有學生聚在一起討論不解的地方，還會主動問學生有沒有需要解答的。
考試也是，若助教改的不合你意，可以跟助教和教授討論，只要你的論點說得通，那給分絕對不會小氣，而且助教跟教授即便面對這麼多學生要詢問考試一些批改的問題，都還是很有耐心而且很有禮貌，最後會讓學生了解其實該題是想考甚麼觀念阿，並檢討他們出題的方式，真的很喜歡這堂課的教授及助教，真的十分和善很喜歡。
考試也真的都是上課好好聽，內容有搞懂，基本上分數都不會難拿，是有投資有報酬的一科，考古題寫一寫，可以知道大概出題方向
 學到: 基本邏輯、數論、圖論概念，加上排列組合及機率。這些都是之後上邏輯設計很重要的先備知識。 翹課: 可以，不點名，但有時候有去他看到人比較少會加分  困境: 有一些比較tricky的觀念，要多想一下才能了解
方法:  寫考古 和同學討論  </description>
    </item>
    
    <item>
      <title>心得:邏輯設計(大一下必) 麥偉基</title>
      <link>https://andreahsu.github.io/2021/01/</link>
      <pubDate>Fri, 23 Jul 2021 10:29:27 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/01/</guid>
      <description>課程走向: 考試: 三次段考，相較於另一個張世傑教授，麥偉基教授教得比較慢，
心得: 個人認為，英文授課，
 學到:  困境: 方法: </description>
    </item>
    
    <item>
      <title>心得:軟體實驗設計(大二下必) 吳尚鴻</title>
      <link>https://andreahsu.github.io/2021/software/</link>
      <pubDate>Mon, 19 Jul 2021 12:59:48 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/software/</guid>
      <description>課程走向 上課是輔助，網路上有預先錄好的詳細教學影片，每周的影片時數很多，但十分詳細，每周都會釋出下一周的教學影片，老師實際上課時只提重點，細節要自己回去看影片。老師的投影片也做得非常詳細， 會介紹hmtl、css、javascript，會介紹業界常用的軟體跟debug工具
project 期末要做出一個 可以解決生活一個問題 的專題，期中報告前會先由助教和各組討論，不行的題目就會被打槍，要重想(幾乎每組都會被打槍)，最容易被問的問題也讓學生學習到，未來在開發一個專案或產品時，到底應該先考慮哪些
 真的有這個需求嗎?  那現在市場上就已經有&amp;hellip;.那這個我可以用&amp;hellip;甚麼功能取代你要做的東西，一樣可以達到功效阿   現有技術調查  那你們想解決的問題到底是甚麼，你們的產品跟現在市面上的&amp;hellip;有甚麼不一樣   功能不要太發散  一方面是怕做不完，一方面我們能確保整合性的產品功效真的做的會比focus在單一問題點上的現有產品還要好嗎?    此外，老師非常看中 user 介面、RWD響應式設計
考試   每周都有上機，是助教實際帶實作的部分，內容主要跟課程相搭，有時候是作業，前幾次期限通常是當天晚上12點，後面因為要完成的部分量比較多，所以期限通常是一星期之後;有時候是lab考試，規定在上機的兩小時要寫出來，但會視情況而定，有時候太難了就會改期限或改成作業(很彈性)。幾堂課之後，就會要求要分組，4人上限為組，lab後半學期的作業跟上機考幾乎都是以小組為單位，期中報告跟期末project也都是小組一起合作完成
  內容: 一開始會教導使用git，每周的作業跟上機模板也都是要從老師實驗室的gitlab clone下來，從基礎html，css，javascipt，並會教導引用一些boostrap的套件，後來會圍繞在建一個功能完整的天氣預報網站，引用api跟一些開放性資料，會搭配課程教導前端框架React，並使用後端DB postgres，還會deploy到AWS上，最後會提及一些機器學習
  分數:
  上機跟作業總佔比60%(除下來一次就是佔4%到5%)，期中提案報告與期末成果報告分數很重
  期中與期末:
會提前說需要報告哪些內容，評分由助教及老師給(給分很嚴)，只要有一項沒有報告到或不完整可能該項評分項目就會沒分數
期末會審視期中提案到底完成哪些，所以期中不能太浮誇XD若期末完成度不足會扣分
    心得 這是目前學到最多實作應用的課程，真的很棒，雖然loading很重，但每週課程好好跟，上機好好搞懂，不懂的語法或功能就多google，以前自學可能不知道有這麼多套件可以使用，也只會很基本的排版阿，透過每一次上機的作業及考試，也會更知道有哪些技術可以使用，尤其在最後final project的時候，自己實作時會去google及debug，更提升解決問題的能力。實際做出一個真的可以用的東西真的會讓成就感及動力滿滿。 此外，和他人的溝通合作能力也很重要，不論是作業、lab、final project都需要小組協作，而一組之內一定有carry隊友跟被carry的隊友，但大家要各司其職，不要起紛爭才是最重要的。
  學到javascript、react、css、nodejs&amp;hellip;前後端相關技術，以及溝通能力，收穫滿滿。
  翹課:可以，他不管，但損失的真的會是自己。
  困境  每次的lab助教都匯給模板code，要自己改寫並完成他規定的幾個要求/功能，因為還不是很會trace code，所以很常盯著程式碼發呆 一樣，有一群已經優相關開發經驗的同學，在這方面就寫得很快，可能他們1個小時解決，我要寫3天 語法或很多功能其實幾個函示就解決，但因為不知道，上課也沒提到，所以要花很多時間去google，找解答 final project發想主題其實會發現不簡單，因為市場調查跟現有技術大多都已經存在了，一個好的idea真的是從日常生活細微觀察而得來 有時候即使老師講過，但都是聽聽而已，對實際給一個題目要實作仍然無法馬上知道要從哪裡下手  方法  同學就是寶藏，多問多看，身邊的電神朋友一定會很願意給予方向 多google，學習如何下關鍵字 多觀察生活周遭，對生活事物敏銳，多接觸科技新知 要學會如何看錯誤訊息，console.</description>
    </item>
    
    <item>
      <title>心得:計算機程式設計二(大一下必) 楊舜仁</title>
      <link>https://andreahsu.github.io/2021/cs_2/</link>
      <pubDate>Thu, 15 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_2/</guid>
      <description>課程走向: 更深入的帶一些基礎演算法的概念，會合併一點點計算機結構的硬體相關知識，讓我們對基礎電腦的運作有一定的認識，學期前1/3會是C的基礎演算法概念，後2/3都是C++，會從語法教起，提及class物件導向，再用物件導向的C++解題
考試:   三次段考(模式和上學期相同)
  每兩周上機考一次，第一次簡單，然後難易度大概是以三次段考區分:
  第一次期中前都是延伸上學期程設一的C，帶一些基礎的演算法像是LinkList、Queue、決策樹、BFS、DFS，這部分應該是整個學期最難的，因為涉及基礎演算法，即使弄懂了作業題目，在短短上機考時間內想要破台，有基礎分，但改編題要想出好的演算法其實很難。
 第一次期中考也是演算法相關的，難度 5顆星    第二次期中則是在交受基礎C++語法，所以應該是這學期中最簡單的，上機也都是用原有程式的概念，只是換成C++寫，但就是要在這段時間內熟悉語法
 第二次期中可C++基礎語法，難度 2顆星    期末考難度其實端看前面有沒有打穩，就是用C++語法寫一些演算法相關的題目，主要會放在使用C++函示庫的套件，如果語法熟悉解題概念都還留在腦內，那這次段考應該也是a piece of cake。但若仍不是很熟悉語法，尤其是自己定義class(這個非常重要)，那可能解題上會有一定的困難度
 期末考，難度 4顆星      project: 這學期以三個project，分別對應到三次段考期間學到的東西
 compiler: 用C，搭配上課交的一些硬體計算機架構、組合語言，撰寫一個模擬的編譯器  主要用到決策樹的概念 用c優化建構樹及遍歷樹的過程，最後輸出轉成組合語言   allegro: 用C++，搭配上課提及的基礎C++繼承與class概念，實做一個allegro小遊戲  主要用到C++的繼承概念 用C++， 搭配 allegro套件寫出tower defence遊戲   othello: 用C++，搭配上課提及的利用C++套件撰寫演算法概念  主要用到C++自己寫class跟演算法(建立決策樹及優化)，及怎麼玩黑白棋othello 實作出othello AI去打敗助教們的othello AI    三次project下來，我都覺得，一開始看助教給的模板code，會真的很沒頭緒，完全不知道她到底在幹嘛，但三次我都是，越摸越熟悉，1天不懂，2天不懂，3天不懂&amp;hellip;漸漸到越來越參透整份code的邏輯架構，有的時候自己try錯了，整份打掉重來都不是意外，每一次的構思都將讓整個概念越來越清楚，真的只有實際想到甚麼然後嘗試看看，才能有所收穫。
當然不可否認的還有跟同儕們討論想法，和他人討論或交流的過程中才會發現自己來有哪個觀念不清楚，或是激發更多想法，釐清某個架構，而且會有一種肩併肩作戰的感覺XD有人陪著自己一起奮戰，就比較不孤單，受挫時也會覺得，&amp;ldquo;還有大家一起努力、自己也不能氣餒!!&amp;rdquo;
結論就是，自己try try看，多跟同學交流，多花時間去理解他就對了</description>
    </item>
    
    <item>
      <title>心得:計算機程式設計一(大一上必) 楊舜仁</title>
      <link>https://andreahsu.github.io/2021/cs_1/</link>
      <pubDate>Mon, 05 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_1/</guid>
      <description>課程走向: 偏向純粹解程設題，並沒有像電機系的程設(偏實作 像是linux 系統 或他們的考試是譬如 把一篇文章縮排之類的) 覺得一直解題會到最後有點乏味，畢竟整天打oj純刷題只會寫一堆題目，也不會變得比較會實作，
而且程設解題技巧也就那些，能不能解出題目純粹看你刷題夠不夠多，夠不夠熟練這個解題技巧，還有遇到這個題目可以反應出要用什麼技巧 打oj最後就會變得很無聊，但未來面試可能都會要求現場解題，所以打oj是個很棒能訓練邏輯 及 熟悉解題的方法
final preoject : 只有最後final project才真正有在資工系的感覺，是要求做一個戰機遊戲，使用的是allegro套件(但現在大多開發遊戲的都用unity，跟本沒人在用allegro)，用c語法搭配allegro可以寫出來，會給一開始的模板，之後講解allegro的一些使用概念，之後會有hackthon，基本上教你如何寫出他最終評分標準的一些基本功能
最後評分是由助教評分，評分標準會分成基本分跟進階分(介紹allegro就會講解),就是把你做的成品demo給助教看，跟他說你做了哪些功能，哪裡你覺得很特別 然後基本上大家分數差不多，因為創意分數占分少(加上又是主觀評分)，只要功能有出來就大家分數差不多 大多數的人都是前三天才開始動筆，三天就能寫好
考試  每週小考: 2小時 每週上機考，內容是作業題目/作業題目修改偶爾有全新題目，但考得觀念就是作業題用到的觀念跟上課講的進度內容  前幾周很平易近人，可能一部分因為內容簡單，作業簡單 但到中間開始會有需要時間思考，到後面會變得蠻難的(可能想法簡單但實際用程設實作出來不易)
時間拿捏很重要，要懂得時間分配，跟適時果斷放棄某一題之類的
 期中期末: 3小時 一學期三次期中，一樣會有期中練習題，基本上考試會有一題跟作業題一樣(基本分)，其他就是作業變形題或全新的題目  大多都會出不來，很常會延長考試時間，但通常不會有很多滿分的人
調分:  會調但沒有到調爆  老師很和善很喜歡跟學生互動，或私下聊天，而且記性非常好 助教也都很和善，作業題寫不出來可以寄信問問，或是有TA time也可以當場去請教助教
心得: 老師上課都用ppt講解，並會把ppt跟上課講解的例題code一併放在學習平台上
會逐行講解code 但上課不會實際打code，也不會在電腦教室上機上課
上課內容會從最基本的c語法教起，後面會提到recursion迴圈，會開始進到一些進階難的題目 再之後就是動態陣列跟link list，也是會應用這兩個概念去帶題目， 難，但融會貫通後就會比較容易，但我自己的感覺是，要真正融會貫通很難，可能遇到相似題目會解，但稍微改一下就不知道要怎麼下手了
  學到如何打oj，學到一些程設解題的技巧，學到如何用allegro寫小遊戲
  可翹課嗎?可以 ，但偶爾他上課會抽同學回答問題，(但被抽到卻沒有到的同學好像也不會怎樣??)
  困境: 剛進去就會遇到不少程設很厲害的人，但沒辦法他們比我們多打了3年的code，所以解題思路一定不及他們，會很挫折，尤其是上機考出不來的時候，或是大家都出不來但你比大家還低分
 問題:    無法寫出一個很通用的程式，會需要考慮很多額外狀況
  或是少考慮條件
  如果有題目寫不出來就會為了考試去參考別人的code，然後就會不知不覺變成在背別人的code</description>
    </item>
    
  </channel>
</rss>
