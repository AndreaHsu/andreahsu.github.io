<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs on Andrea&#39;s Blog</title>
    <link>https://andreahsu.github.io/tags/cs/</link>
    <description>Recent content in cs on Andrea&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jul 2021 10:29:27 +0800</lastBuildDate><atom:link href="https://andreahsu.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>logic design</title>
      <link>https://andreahsu.github.io/2021/01/</link>
      <pubDate>Mon, 05 Jul 2021 10:29:27 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/01/</guid>
      <description>logic design </description>
    </item>
    
    <item>
      <title>Cs</title>
      <link>https://andreahsu.github.io/2021/cs/</link>
      <pubDate>Mon, 05 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs/</guid>
      <description>程設心得 楊舜仁 老師上課都用ppt講解，並會把ppt跟上課講解的例題code一併放在學習平台上
會逐行講解code 但上課不會實際打code，也不會在電腦教室上機上課
上課內容會從最基本的c語法教起，後面會提到recursion迴圈，會開始進到一些進階難的題目 再之後就是動態陣列跟link list，也是會應用這兩個概念去帶題目， 難，但融會貫通後就會比較容易，但我自己的感覺是，要真正融會貫通很難，可能遇到相似題目會解，但稍微改一下就不知道要怎麼下手了
可翹課嗎?可以 ，但偶爾他上課會抽同學回答問題，(但被抽到卻沒有到的同學好像也不會怎樣??)
課程走向: 偏向純粹解程設題，並沒有像電機系的程設(偏實作 像是linux 系統 或他們的考試是譬如 把一篇文章縮排之類的) 覺得一直解題會到最後有點乏味，畢竟整天打oj純刷題只會寫一堆題目，也不會變得比較會實作，
而且程設解題技巧也就那些，能不能解出題目純粹看你刷題夠不夠多，夠不夠熟練這個解題技巧，還有遇到這個題目可以反應出要用什麼技巧 打oj最後就會變得很無聊，但未來面試可能都會要求現場解題，所以打oj是個很棒能訓練邏輯 及 熟悉解題的方法
final preoject : 只有最後final project才真正有在資工系的感覺，是要求做一個戰機遊戲，使用的是allegro套件(但現在大多開發遊戲的都用unity，跟本沒人在用allegro)，用c語法搭配allegro可以寫出來，會給一開始的模板，之後講解allegro的一些使用概念，之後會有hackthon，基本上教你如何寫出他最終評分標準的一些基本功能
最後評分是由助教評分，評分標準會分成基本分跟進階分(介紹allegro就會講解),就是把你做的成品demo給助教看，跟他說你做了哪些功能，哪裡你覺得很特別 然後基本上大家分數差不多，因為創意分數占分少(加上又是主觀評分)，只要功能有出來就大家分數差不多 大多數的人都是前三天才開始動筆，三天就能寫好
考試  每週小考: 2小時 每週上機考，內容是作業題目/作業題目修改偶爾有全新題目，但考得觀念就是作業題用到的觀念跟上課講的進度內容  前幾周很平易近人，可能一部分因為內容簡單，作業簡單 但到中間開始會有需要時間思考，到後面會變得蠻難的(可能想法簡單但實際用程設實作出來不易)
時間拿捏很重要，要懂得時間分配，跟適時果斷放棄某一題之類的
 期中期末: 3小時 一學期三次期中，一樣會有期中練習題，基本上考試會有一題跟作業題一樣(基本分)，其他就是作業變形題或全新的題目  大多都會出不來，很常會延長考試時間，但通常不會有很多滿分的人
調分: 會調但沒有到調爆
老師很和善很喜歡跟學生互動，或私下聊天，而且記性非常好 助教也都很和善，作業題寫不出來可以寄信問問，或是有TA time也可以當場去請教助教
學到如何打oj，學到一些程設解題的技巧，學到如何用allegro寫小遊戲
問題: 剛進去就會遇到不少程設很厲害的人，但沒辦法他們比我們多打了3年的code，所以解題思路一定不及他們，會很挫折，尤其是上機考出不來的時候，或是大家都出不來但你比大家還低分
無法寫出一個很通用的程式，會需要考慮很多額外狀況
或是少考慮條件
如果有題目寫不出來就會為了考試去參考別人的code，然後就會不知不覺變成在背別人的code
方法: 多練題目 把作業題練熟 如果一個方法行不通就會學會轉換思考，不要一直陷在自己的思路裡，不然上機很容易會時間不夠就解不出來 計時寫練習題 畫圖解題 多跟他人討論 可以在討論的過程中可能想到自己有甚麼條件沒考慮到
用一句話把自己的問題描述出來，google，然後上網找這種解題觀念，盡量不要看code，試著理解觀念跟實作部分後自己建構code出來</description>
    </item>
    
  </channel>
</rss>
