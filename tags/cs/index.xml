<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cs on Andrea&#39;s Blog</title>
    <link>https://andreahsu.github.io/tags/cs/</link>
    <description>Recent content in cs on Andrea&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jan 2022 20:54:53 +0800</lastBuildDate><atom:link href="https://andreahsu.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>心得:線性代數(大二上必) 張隆紋</title>
      <link>https://andreahsu.github.io/2022/linear_math/</link>
      <pubDate>Sun, 30 Jan 2022 20:54:53 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2022/linear_math/</guid>
      <description>課程走向: 會從高中就接觸過的矩陣運算開始介紹，包含列運算、高斯消去、行列式等等，介紹singular 和 non-singular，接著從vector space開始帶出向量空間運算，解釋許多相關的名詞像是spanning set、linear dependent/independent。
再帶出basis和dimension，將問題解構成座標轉換後較簡易運算的問題(linear transformation)，介紹基礎觀念定義域(kernel)、值域(range)、similarity等等。接著進入orthogonality(正交)，去解釋內積空間問題，並透過least squares solution(最小平方法)求出問題的最適解(ex: 三點不共線 -&amp;gt; 求出最適直線)，後面會簡易介紹gram-schmidt process。
而線性代數最為核心的Eigenvalue和Eigenvector，在這裡就會再簡易介紹一次高中所學的內容，接者會提及 新觀念:Daigonalization對角化、是否defective及Exponential of Matrix，當遇到找不到定值解的微分方程時，可以使用sigmaoid exponent的表達式去描述，最後提及Hermitant Matrices，介紹有關complex number(複數) 的inner product問題，並在課程最後帶一些Singular Value Decomposition(SVD 奇異值分解)。
考試:   三次段考(各佔30%)
  內容:
不難，基本上課本讀通，習題有做，幾乎所有題目都是從課本習題出(但因為習題非常非常多，全部做完也不容易)，大多是計算題，證明題每次大概只有一題。
  給分:
考試分數不難拿，只要觀念釐清、習題做熟就可以拿高分，三次都100不是夢。有沒有調分就不清楚了。
  心得: 教授不會給上課ppt的檔案，只會印紙本(但紙本每次都慢發，沒有講義上課根本都不知道教授在哪裡)，但他有說全部按照原文課本，因此我索性聽了幾堂課後就轉戰課本，發現課本十分詳細又清楚，因此我從來沒有讀過教授的講義，但據同學說裡面都會把課本精華以及他喜考的重點收納在裡面，所以讀講義也是個速成的選擇，不過因為教授蠻催眠的，並且教授只挑&amp;quot;不難&amp;quot;的例題及證明講解，所以我都直接讀課本，可以完整了解證明的過程及思路，也比較省時，不懂的觀念可以查 MIT的linear algebra，Gilbert教授講解的十分詳細，或是其他網路資源隨便一查就可以自學。
會有10%的出席成績，每堂課都需要簽到(一次沒去扣一分，扣完為止)，所以我會去簽到，然後課堂上讀linear alegebra，老師很好的是，考前會大複習，會一直強調他要考的觀念跟類似題型，並且考前會有一個星期的溫書假(因為每周都會多上一堂課的時間將進度拉前)。</description>
    </item>
    
    <item>
      <title>心得: 資料結構(大二上必) 沈之涯</title>
      <link>https://andreahsu.github.io/2022/data_structure/</link>
      <pubDate>Sun, 30 Jan 2022 20:54:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2022/data_structure/</guid>
      <description>課程走向: 從基本的c++開始重新介紹，並簡述Algorithm(像是time complexity:big O)，接著進入Array、Stack、Queue、Link List、Tree的講解，而在Tree的部分會帶出prefix、infix、postfix 的應用，基本上這部分在程式設計二時已經有接觸過，同時也是期中考的範圍。接著會開始帶新觀念:Graph、Sorting、Hashing，會搭配課程出相關的作業，到學期末會講解關於字典樹(trie、suffix tree&amp;hellip;)的algorithm，有便於應用在final project。
作業: 每兩周會出一次作業，每次期限是2星期，需要繳交作業檔案，忌諱抄襲。
考試:   兩次考試(期中和期末，各佔20%)
  會有隨堂小考(算在點名分數):
會前一節課預告，基本上一次兩題，一題是寫出用特定演算法解題的步驟(過程)，另一題偏向需要思考新的方法或是證明。
  每兩周上機考一次，一學期共6次(占分15%):
每次2小時，每次6筆測資，不是每次和作業相關，但進度到哪就會跟內容範圍內的知識相關，有時候很難，過一筆就有60分，基本上越後面的測資越困難，後面的側資都很大，或是很極端，所以變數型別很重要，最好能開到unsigned long long去避免是overflow才導致的錯誤，多一筆大致上就多10分。
難度:4顆星，難，有時候知道該題跟甚麼內容相關，也知道應該要用甚麼algorithm，但就是不知道要怎麼用進去。
  期中&amp;amp;期末:
會有一半的基本分，但雖然說是基本分，也很容易因為小粗心就全部失分，所以最好是能將所有基本分數都把握住。 會有一半很難需要思考的題目，思考了也不一定能做出來，這一半之中是由證明題、閱讀題跟想出更好的algorithm的題目組成。雖然不一定會，但是可以盡量將想到的都寫出來，有想法比沒有好，而且助教也能根據回答斟酌給分，此外，考古題很重要，因為這一半很難的題目中會有1~2題是考古，一模一樣，老師敢考出來個人猜測基本上也是因為，這些題目就算做過也不一定當場就推得出來，需要縝密思考且真的有釐清才行。
給分: 筆試給分很善良，但是那是建立在你有寫出東西，總體還是蠻慘的。不過老師說原始分數都是對班上ranking的一個標準，並不是實際學期的分數，總分部分老師會調分。
  project: 每一屆不一樣，我們這屆是要實作出類似搜尋引擎的功能，給很多篇essay，每篇分別有title跟內文，給定query，須找出包含特定字or字首or字尾的essay，並且需要找出給定query的交集或聯集。
附上的教學內容有trie跟suffix tree，最直接的作法是每篇文章見兩個trie，一正一反，根據每個詞建在正的trie中，跟將詞reverse後建在反的trie中，最後根據query搜尋每篇文章的兩個trie，即可找出是否包含給定query的文章了。
心得: 教授是一個很年輕、邏輯清晰的老師，學期初會警告我們不要聽網路上說這門課選老師的很甜之類的，但是很替學生著想，考題難度很夠但最後分數又不會很刁難學生。 老師觀念跟algorithm的步驟都講解得很清楚，教材也都有做動畫很易懂，我還蠻喜歡老師的。 但是這堂課叫做&amp;quot;資料結構&amp;quot;，應該比較偏向教導遇到甚麼資料應該用甚麼結構儲存，但整體課程都偏向講解algorithm，雖然學到很多，但跟這堂課可能有些不太符合。 不過總體而言，這門課還是獲益良多的一門課的!</description>
    </item>
    
    <item>
      <title>心得:邏輯設計實驗(大二上必) 李濬屹</title>
      <link>https://andreahsu.github.io/2022/logic_design_experiment/</link>
      <pubDate>Sun, 30 Jan 2022 20:54:20 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2022/logic_design_experiment/</guid>
      <description>課程走向: 會從基礎的ic design開始介紹，前半個學期都會聚焦在verilog，從基礎語法、到撰寫module、劃分hierarchy，並且教導如何將code燒入FPGA， 在這堂課中會讓我們熟悉FPGA操作，從接線、switch、LED、7-segment display等等。後半個學期會專注在coding style，並且詳細介紹將其他電子材料(組件，像是鍵盤、音響、螢幕、馬達電動車等等)接上FPGA，如何接訊號並教導撰寫verilog透過FPGA控制。 由於作業和final project需要和同學合力完成，因此上課規定2人一組，可自行挑選隊友，也可以讓老師分發。
作業:   型式:
每兩週一次，每次作業期限是1星期，幾乎每次的作業都是小組作業。 每次作業的basic題目是上機考須完成的內容，而advance的題目則為作業，會有4~5題，加上1題須實作入FPGA裡的，繳交期限當天要當場demo FPGA作業。 每次作業繳交時都需要交設計的.v檔、testbench、跟report，report要詳述如何設計，並需要繪製blockdiagram說明整體。
  內容:
基本上advance的題目都需要時間去理解題目，當然有平易近人的題目，但大多都是要詳細去思考整體架構該如何設計、怎麼劃分，電路該怎麼接，以及考慮一些可能未考慮到的狀況。 此外，需撰寫testbench去測試自己的code有沒有甚麼問題，寫testbench真的對偵錯有很大的幫助，可以迅速知道自己有沒有接錯線路。 FPGA題目從最簡單亮LED燈，到用FPGA實作1A2B遊戲跟販賣機，後期會接上馬達電動車跟VGA螢幕顯示，架構會越來越複雜，兩個人可以互相討論並分工合作真的很棒(前提請找到好隊友XD)，可以切割sub module在互相組合完成FPGA題目。
  難度與作業給分:
難度 5顆星，評分的方式為助教會使用他們的testbench測試我們繳交的code，若通過測試則code部分分數應該會全拿，剩下就是report分數(占比個人認為很重)，因為即使code都通過了，但report漏寫或是寫得不好，扣分蠻重的; 反之，若code沒有通過測試，但report撰寫詳細(即讓批閱者能理解整體設計架構跟邏輯是正確的，可能出小差錯)，則分數還是很高的。
  考試:   二次段考(期中和期末)
  每兩周上機考一次，須當場做出並給助教demo，可以和同學討論，作業也會在上機考當周公布，當周的下周就是繳交作業期限。
  內容:
都跟作業有相當大的關係，作業只要有好好寫，基本看到題目不會太慌張，但是，能不能寫對就是憑個人細心，因為寫verilog時很容易不小心接錯線，就一步錯全部錯了，而且考試是直接整題沒有分數(沒有部份分數)。 而考試只會給input、output名字，語法之類的完全不會給，因此考試務必要 非常非常熟悉 verilog。 而寫testbench也很重要，因為這可以幫助你偵測是寫錯code，但是很容易沒有時間作完所有題目，只要不小心一題沒有掌控好時間，就會寫不完。時間掌握很重要 另外，每次考試大概4-5題，其中會有一題是FPGA題目，當場寫出來給助教dmeo過關就有分數，通常如果有把握會寫FPGA，那就先寫，把該拿的分數先拿到手，避免後面大家都搶著demo過了考試時間。
  project: 這堂課只有最後需要兩人合力完成一個final project，題目任意發揮，只要做出你的酷東西(教授真的特別特別強調這個)，期末展示給教授和助教看，需要稍微簡介/報告作品，主要評分為完整性、困難性、以及創意性等等，最後當然也要繳交report，來說明整體設計及中間的嘗試、困難與解方。
網路上有許多作品，像是夾娃娃機、或是一些透過FPGA控制的外接螢幕小遊戲，所以老師希望能夠看到別具一格的創意。
加分項目是，能將ML融合進final project中(意即將ML模型刻入FPGA)，並且有實際在final project中發揮作用，就可以加分。
我們這屆有人做出很有趣的小遊戲，像是數獨、1A2B等等有關可以手寫數字的小遊戲，也順便應用了ML。不含ML的作品也有像是，音樂與燈光的互動裝置、天竺鼠藍芽車車等等&amp;hellip;&amp;hellip;，許多令人印象深刻的作品。
心得&amp;amp;困境&amp;amp;方法: 這是這個學期花最多心力和腦袋的一門課，還有肝XD但不得不說，真的很充實，老師跟助教都非常認真，上課講義非常詳細，下課若預約TA time助教也都會很有耐心的解答問題，老師是一個很親民的人，我們每堂上機老師都會到場，在demo馬達車車或是final project時也都會在一旁錄影，而且很喜歡跟學生討論問題，而且很鼓勵我們多嘗試新的酷咚咚。
而我在這門課學到三大能力: 設計電路，撰寫verilog、耐心和debug方法、溝通與體恤
經常聽到很厲害的同學說「邏輯設計真正的核心是，如何設計電路，而不是code怎麼寫」，因此他們總說寫成事前先畫圖，把架構跟接線畫出來，這樣寫程式就會快輕鬆且容易許多，這也是老師會要求我們在每次作業都要繳交report，並繪製block diagram的原因，只要邏輯清晰，寫code就不難。
但一開始還在摸索硬體語言的我完全不懂，每每遇到題目都要debug好久，而且每次report用draw.io繪製一張diagram動輒就要1、2個小時，所以我經常每兩周就要大熬夜一次，對於每天12.睡覺的我真的很破壞作息。
但是在幾次的作業下來後慢慢抓住了一些手感，也當然因為有隊友可以互相討論，讓我可以在撰寫前先跟隊友討論一下對實做的一些問題和設計架構，也從討論中可以看到不一樣的觀點，時常會有「阿~原來還可以這樣做!」那種醍醐灌頂的感覺，而且可以從作業中自己踩坑自己爬起來，更加印象深刻，對FPGA或是硬體電路設計跟verilog有更進一步的了解。
因為作業的期限是1周，加上我的不熟悉，常常讓我一題明明寫出來了卻找不出bug，debug總是花掉我很多時間，如果還算入report跟繪圖的時間，我幾乎要交作業的那周天天都在寫verilog。我時常詢問一些厲害的同學他們是怎麼跟去debug、或是明明跟我一樣都是第一次接觸硬體語言，他們是怎麼去適應並熟悉的，也透過他們的分享，讓我知道像是可以結合以前所學，把中間運算的東西外接output，看看是哪裡出錯，才不用死死盯著code卻百思不得其解等等的知識。然後，若陷入太久，可以轉換心情，轉移注意力，隔一段時間再回來看看，或許會有新的發現。
最後，因為這堂課幾乎所有作業都要2人小組完成，因此，我也跟我的隊友成為蠻要好的朋友，雖然我們會有意見不合的時候，會有時間喬不攏的時候，但是我們會一起鼓勵彼此，一起衝刺趕在期限內完成作業，有時候他體諒我有社團，有時候我體諒他有考試，我們總是在溝通的過程中能互相體恤對方的立場，有時候我們各自輪流雷想向對方道歉時，彼此卻又總會安慰對方，並且體諒對方，真的覺得這是一件難能可貴的事，因為合作必有磨合，而能在磨合下還能互相鼓勵扶持，真的很不簡單:)
我們final project也做出了我們想像中的酷東西，不想要明明是硬體設計課卻單純只做純軟體的應用，我們一起構思出與硬體結合的酷project，一起為仙人掌笑到翻掉，一起逛電子材料行，一起第一次在資電館過夜，一起在完事後大爆睡，老實說真的很累，但真的很充實，而我們也都為自己的酷東西感到驕傲:)</description>
    </item>
    
    <item>
      <title>心得:離散數學(大一上必) 韓永楷</title>
      <link>https://andreahsu.github.io/2021/discete_math/</link>
      <pubDate>Fri, 23 Jul 2021 20:33:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/discete_math/</guid>
      <description>課程走向: 老師有自己的ppt及講義，可以自己去印成一本紙本的講義(上課作筆記比較方便)，教授喜歡和學生互動，所以幾乎每次除了上正課，都還會有趣味小問答，不計分，純粹有趣，小問答內容大多也都跟上課提及的知識有關或延伸。
教授教得十分仔細，雖然英文授課，但內容跟表達都會講到讓學生懂，所以不用擔心英文授課聽不懂的問題，加上老師上課速度其實挺慢的，就是希望學生可以好好吸收每一次的內容。
但相較另一位蔡明哲教授開的離散數學，永楷教的內容比較少，然後比較簡單一點。 基本上離散數學就是高中延伸的排列組合跟機率，一些基礎數論，會提及一點圖論及專有名詞，
考試: 三次段考，因為永楷上的比較慢，所以每次的內容其實不會很難，每次大概都是6~7題，有一題加分題。
 分數計算有兩種，取較高的作為總成績的算法  一種是三次平均 一種是其中兩次最高的各40%，最低分的那次占20% 不調分，但給分真的很甜    心得: 覺得永楷真的很棒，就是可以學到東西又是一堂甜課，教授很親民，下課後若看到有學生聚在一起討論不解的地方，還會主動問學生有沒有需要解答的。
考試也是，若助教改的不合你意，可以跟助教和教授討論，只要你的論點說得通，那給分絕對不會小氣，而且助教跟教授即便面對這麼多學生要詢問考試一些批改的問題，都還是很有耐心而且很有禮貌，最後會讓學生了解其實該題是想考甚麼觀念阿，並檢討他們出題的方式，真的很喜歡這堂課的教授及助教，真的十分和善很喜歡。
考試也真的都是上課好好聽，內容有搞懂，基本上分數都不會難拿，是有投資有報酬的一科，考古題寫一寫，可以知道大概出題方向
 學到: 基本邏輯、數論、圖論概念，加上排列組合及機率。這些都是之後上邏輯設計很重要的先備知識。 翹課: 可以，不點名，但有時候有去他看到人比較少會加分  困境: 有一些比較tricky的觀念，要多想一下才能了解
方法:  寫考古 和同學討論  </description>
    </item>
    
    <item>
      <title>心得:邏輯設計(大一下必) 麥偉基</title>
      <link>https://andreahsu.github.io/2021/01/</link>
      <pubDate>Fri, 23 Jul 2021 10:29:27 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/01/</guid>
      <description>課程走向: 考試: 三次段考，相較於另一個張世傑教授，麥偉基教授教得比較慢，
心得: 個人認為，英文授課，
 學到:  困境: 方法: </description>
    </item>
    
    <item>
      <title>心得:軟體實驗設計(大二下必) 吳尚鴻</title>
      <link>https://andreahsu.github.io/2021/software/</link>
      <pubDate>Mon, 19 Jul 2021 12:59:48 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/software/</guid>
      <description>課程走向 上課是輔助，網路上有預先錄好的詳細教學影片，每周的影片時數很多，但十分詳細，每周都會釋出下一周的教學影片，老師實際上課時只提重點，細節要自己回去看影片。老師的投影片也做得非常詳細， 會介紹hmtl、css、javascript，會介紹業界常用的軟體跟debug工具
project 期末要做出一個 可以解決生活一個問題 的專題，期中報告前會先由助教和各組討論，不行的題目就會被打槍，要重想(幾乎每組都會被打槍)，最容易被問的問題也讓學生學習到，未來在開發一個專案或產品時，到底應該先考慮哪些
 真的有這個需求嗎?  那現在市場上就已經有&amp;hellip;.那這個我可以用&amp;hellip;甚麼功能取代你要做的東西，一樣可以達到功效阿   現有技術調查  那你們想解決的問題到底是甚麼，你們的產品跟現在市面上的&amp;hellip;有甚麼不一樣   功能不要太發散  一方面是怕做不完，一方面我們能確保整合性的產品功效真的做的會比focus在單一問題點上的現有產品還要好嗎?    此外，老師非常看中 user 介面、RWD響應式設計
考試   每周都有上機，是助教實際帶實作的部分，內容主要跟課程相搭，有時候是作業，前幾次期限通常是當天晚上12點，後面因為要完成的部分量比較多，所以期限通常是一星期之後;有時候是lab考試，規定在上機的兩小時要寫出來，但會視情況而定，有時候太難了就會改期限或改成作業(很彈性)。幾堂課之後，就會要求要分組，4人上限為組，lab後半學期的作業跟上機考幾乎都是以小組為單位，期中報告跟期末project也都是小組一起合作完成
  內容: 一開始會教導使用git，每周的作業跟上機模板也都是要從老師實驗室的gitlab clone下來，從基礎html，css，javascipt，並會教導引用一些boostrap的套件，後來會圍繞在建一個功能完整的天氣預報網站，引用api跟一些開放性資料，會搭配課程教導前端框架React，並使用後端DB postgres，還會deploy到AWS上，最後會提及一些機器學習
  分數:
  上機跟作業總佔比60%(除下來一次就是佔4%到5%)，期中提案報告與期末成果報告分數很重
  期中與期末:
會提前說需要報告哪些內容，評分由助教及老師給(給分很嚴)，只要有一項沒有報告到或不完整可能該項評分項目就會沒分數
期末會審視期中提案到底完成哪些，所以期中不能太浮誇XD若期末完成度不足會扣分
    心得 這是目前學到最多實作應用的課程，真的很棒，雖然loading很重，但每週課程好好跟，上機好好搞懂，不懂的語法或功能就多google，以前自學可能不知道有這麼多套件可以使用，也只會很基本的排版阿，透過每一次上機的作業及考試，也會更知道有哪些技術可以使用，尤其在最後final project的時候，自己實作時會去google及debug，更提升解決問題的能力。實際做出一個真的可以用的東西真的會讓成就感及動力滿滿。 此外，和他人的溝通合作能力也很重要，不論是作業、lab、final project都需要小組協作，而一組之內一定有carry隊友跟被carry的隊友，但大家要各司其職，不要起紛爭才是最重要的。
  學到javascript、react、css、nodejs&amp;hellip;前後端相關技術，以及溝通能力，收穫滿滿。
  翹課:可以，他不管，但損失的真的會是自己。
  困境  每次的lab助教都匯給模板code，要自己改寫並完成他規定的幾個要求/功能，因為還不是很會trace code，所以很常盯著程式碼發呆 一樣，有一群已經優相關開發經驗的同學，在這方面就寫得很快，可能他們1個小時解決，我要寫3天 語法或很多功能其實幾個函示就解決，但因為不知道，上課也沒提到，所以要花很多時間去google，找解答 final project發想主題其實會發現不簡單，因為市場調查跟現有技術大多都已經存在了，一個好的idea真的是從日常生活細微觀察而得來 有時候即使老師講過，但都是聽聽而已，對實際給一個題目要實作仍然無法馬上知道要從哪裡下手  方法  同學就是寶藏，多問多看，身邊的電神朋友一定會很願意給予方向 多google，學習如何下關鍵字 多觀察生活周遭，對生活事物敏銳，多接觸科技新知 要學會如何看錯誤訊息，console.</description>
    </item>
    
    <item>
      <title>心得:計算機程式設計二(大一下必) 楊舜仁</title>
      <link>https://andreahsu.github.io/2021/cs_2/</link>
      <pubDate>Thu, 15 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_2/</guid>
      <description>課程走向: 更深入的帶一些基礎演算法的概念，會合併一點點計算機結構的硬體相關知識，讓我們對基礎電腦的運作有一定的認識，學期前1/3會是C的基礎演算法概念，後2/3都是C++，會從語法教起，提及class物件導向，再用物件導向的C++解題
考試:   三次段考(模式和上學期相同)
  每兩周上機考一次，第一次簡單，然後難易度大概是以三次段考區分:
  第一次期中前都是延伸上學期程設一的C，帶一些基礎的演算法像是LinkList、Queue、決策樹、BFS、DFS，這部分應該是整個學期最難的，因為涉及基礎演算法，即使弄懂了作業題目，在短短上機考時間內想要破台，有基礎分，但改編題要想出好的演算法其實很難。
 第一次期中考也是演算法相關的，難度 5顆星    第二次期中則是在交受基礎C++語法，所以應該是這學期中最簡單的，上機也都是用原有程式的概念，只是換成C++寫，但就是要在這段時間內熟悉語法
 第二次期中可C++基礎語法，難度 2顆星    期末考難度其實端看前面有沒有打穩，就是用C++語法寫一些演算法相關的題目，主要會放在使用C++函示庫的套件，如果語法熟悉解題概念都還留在腦內，那這次段考應該也是a piece of cake。但若仍不是很熟悉語法，尤其是自己定義class(這個非常重要)，那可能解題上會有一定的困難度
 期末考，難度 4顆星      project: 這學期以三個project，分別對應到三次段考期間學到的東西
 compiler: 用C，搭配上課交的一些硬體計算機架構、組合語言，撰寫一個模擬的編譯器  主要用到決策樹的概念 用c優化建構樹及遍歷樹的過程，最後輸出轉成組合語言   allegro: 用C++，搭配上課提及的基礎C++繼承與class概念，實做一個allegro小遊戲  主要用到C++的繼承概念 用C++， 搭配 allegro套件寫出tower defence遊戲   othello: 用C++，搭配上課提及的利用C++套件撰寫演算法概念  主要用到C++自己寫class跟演算法(建立決策樹及優化)，及怎麼玩黑白棋othello 實作出othello AI去打敗助教們的othello AI    三次project下來，我都覺得，一開始看助教給的模板code，會真的很沒頭緒，完全不知道她到底在幹嘛，但三次我都是，越摸越熟悉，1天不懂，2天不懂，3天不懂&amp;hellip;漸漸到越來越參透整份code的邏輯架構，有的時候自己try錯了，整份打掉重來都不是意外，每一次的構思都將讓整個概念越來越清楚，真的只有實際想到甚麼然後嘗試看看，才能有所收穫。
當然不可否認的還有跟同儕們討論想法，和他人討論或交流的過程中才會發現自己來有哪個觀念不清楚，或是激發更多想法，釐清某個架構，而且會有一種肩併肩作戰的感覺XD有人陪著自己一起奮戰，就比較不孤單，受挫時也會覺得，&amp;ldquo;還有大家一起努力、自己也不能氣餒!!&amp;rdquo;
結論就是，自己try try看，多跟同學交流，多花時間去理解他就對了</description>
    </item>
    
    <item>
      <title>心得:計算機程式設計一(大一上必) 楊舜仁</title>
      <link>https://andreahsu.github.io/2021/cs_1/</link>
      <pubDate>Mon, 05 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_1/</guid>
      <description>課程走向: 偏向純粹解程設題，並沒有像電機系的程設(偏實作 像是linux 系統 或他們的考試是譬如 把一篇文章縮排之類的) 覺得一直解題會到最後有點乏味，畢竟整天打oj純刷題只會寫一堆題目，也不會變得比較會實作，
而且程設解題技巧也就那些，能不能解出題目純粹看你刷題夠不夠多，夠不夠熟練這個解題技巧，還有遇到這個題目可以反應出要用什麼技巧 打oj最後就會變得很無聊，但未來面試可能都會要求現場解題，所以打oj是個很棒能訓練邏輯 及 熟悉解題的方法
final preoject : 只有最後final project才真正有在資工系的感覺，是要求做一個戰機遊戲，使用的是allegro套件(但現在大多開發遊戲的都用unity，跟本沒人在用allegro)，用c語法搭配allegro可以寫出來，會給一開始的模板，之後講解allegro的一些使用概念，之後會有hackthon，基本上教你如何寫出他最終評分標準的一些基本功能
最後評分是由助教評分，評分標準會分成基本分跟進階分(介紹allegro就會講解),就是把你做的成品demo給助教看，跟他說你做了哪些功能，哪裡你覺得很特別 然後基本上大家分數差不多，因為創意分數占分少(加上又是主觀評分)，只要功能有出來就大家分數差不多 大多數的人都是前三天才開始動筆，三天就能寫好
考試  每週小考: 2小時 每週上機考，內容是作業題目/作業題目修改偶爾有全新題目，但考得觀念就是作業題用到的觀念跟上課講的進度內容  前幾周很平易近人，可能一部分因為內容簡單，作業簡單 但到中間開始會有需要時間思考，到後面會變得蠻難的(可能想法簡單但實際用程設實作出來不易)
時間拿捏很重要，要懂得時間分配，跟適時果斷放棄某一題之類的
 期中期末: 3小時 一學期三次期中，一樣會有期中練習題，基本上考試會有一題跟作業題一樣(基本分)，其他就是作業變形題或全新的題目  大多都會出不來，很常會延長考試時間，但通常不會有很多滿分的人
調分:  會調但沒有到調爆  老師很和善很喜歡跟學生互動，或私下聊天，而且記性非常好 助教也都很和善，作業題寫不出來可以寄信問問，或是有TA time也可以當場去請教助教
心得: 老師上課都用ppt講解，並會把ppt跟上課講解的例題code一併放在學習平台上
會逐行講解code 但上課不會實際打code，也不會在電腦教室上機上課
上課內容會從最基本的c語法教起，後面會提到recursion迴圈，會開始進到一些進階難的題目 再之後就是動態陣列跟link list，也是會應用這兩個概念去帶題目， 難，但融會貫通後就會比較容易，但我自己的感覺是，要真正融會貫通很難，可能遇到相似題目會解，但稍微改一下就不知道要怎麼下手了
  學到如何打oj，學到一些程設解題的技巧，學到如何用allegro寫小遊戲
  可翹課嗎?可以 ，但偶爾他上課會抽同學回答問題，(但被抽到卻沒有到的同學好像也不會怎樣??)
  困境: 剛進去就會遇到不少程設很厲害的人，但沒辦法他們比我們多打了3年的code，所以解題思路一定不及他們，會很挫折，尤其是上機考出不來的時候，或是大家都出不來但你比大家還低分
 問題:    無法寫出一個很通用的程式，會需要考慮很多額外狀況
  或是少考慮條件
  如果有題目寫不出來就會為了考試去參考別人的code，然後就會不知不覺變成在背別人的code</description>
    </item>
    
  </channel>
</rss>
