<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feedback on Andrea&#39;s Blog</title>
    <link>https://andreahsu.github.io/categories/feedback/</link>
    <description>Recent content in Feedback on Andrea&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jul 2021 10:05:43 +0800</lastBuildDate><atom:link href="https://andreahsu.github.io/categories/feedback/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cs_2</title>
      <link>https://andreahsu.github.io/2021/cs_2/</link>
      <pubDate>Thu, 15 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_2/</guid>
      <description>計算機程式設計二心得(大一下必) 楊舜仁 課程走向: 更深入的帶一些基礎演算法的概念，會合併一點點計算機結構的硬體相關知識，讓我們對基礎電腦的運作有一定的認識，學期前1/3會是C的基礎演算法概念，後2/3都是C++，會從語法教起，提及class物件導向，再用物件導向的C++解題
考試:   三次段考(模式和上學期相同)
  每兩周上機考一次，第一次簡單，然後難易度大概是以三次段考區分:
  第一次期中前都是延伸上學期程設一的C，帶一些基礎的演算法像是LinkList、Queue、決策樹、BFS、DFS，這部分應該是整個學期最難的，因為涉及基礎演算法，即使弄懂了作業題目，在短短上機考時間內想要破台，有基礎分，但改編題要想出好的演算法其實很難。
 第一次期中考也是演算法相關的，難度 5顆星    第二次期中則是在交受基礎C++語法，所以應該是這學期中最簡單的，上機也都是用原有程式的概念，只是換成C++寫，但就是要在這段時間內熟悉語法
 第二次期中可C++基礎語法，難度 2顆星    期末考難度其實端看前面有沒有打穩，就是用C++語法寫一些演算法相關的題目，主要會放在使用C++函示庫的套件，如果語法熟悉解題概念都還留在腦內，那這次段考應該也是a piece of cake。但若仍不是很熟悉語法，尤其是自己定義class(這個非常重要)，那可能解題上會有一定的困難度
 期末考，難度 4顆星      project: 這學期以三個project，分別對應到三次段考期間學到的東西
 compiler: 用C，搭配上課交的一些硬體計算機架構、組合語言，撰寫一個模擬的編譯器  主要用到決策樹的概念 用c優化建構樹及遍歷樹的過程，最後輸出轉成組合語言   allegro: 用C++，搭配上課提及的基礎C++繼承與class概念，實做一個allegro小遊戲  主要用到C++的繼承概念 用C++28 搭配 allegro套件寫出tower defence遊戲   othello: 用C++，搭配上課提及的利用C++套件撰寫演算法概念  主要用到C++自己寫class跟演算法(建立決策樹及優化)，及怎麼玩黑白棋othello 實作出othello AI去打敗助教們的othello AI    三次project下來，我都覺得，一開始看助教給的模板code，會真的很沒頭緒，完全不知道她到底在幹嘛，但三次我都是，越摸越熟悉，1天不懂，2天不懂，3天不懂&amp;hellip;漸漸到越來越參透整份code的邏輯架構，結論都是，自己try try看，多花時間去理解他就對了</description>
    </item>
    
    <item>
      <title>logic design</title>
      <link>https://andreahsu.github.io/2021/01/</link>
      <pubDate>Mon, 05 Jul 2021 10:29:27 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/01/</guid>
      <description>logic design </description>
    </item>
    
    <item>
      <title>Cs_1</title>
      <link>https://andreahsu.github.io/2021/cs_1/</link>
      <pubDate>Mon, 05 Jul 2021 10:05:43 +0800</pubDate>
      
      <guid>https://andreahsu.github.io/2021/cs_1/</guid>
      <description>計算機程式設計一心得(大一上必) 楊舜仁 課程走向: 偏向純粹解程設題，並沒有像電機系的程設(偏實作 像是linux 系統 或他們的考試是譬如 把一篇文章縮排之類的) 覺得一直解題會到最後有點乏味，畢竟整天打oj純刷題只會寫一堆題目，也不會變得比較會實作，
而且程設解題技巧也就那些，能不能解出題目純粹看你刷題夠不夠多，夠不夠熟練這個解題技巧，還有遇到這個題目可以反應出要用什麼技巧 打oj最後就會變得很無聊，但未來面試可能都會要求現場解題，所以打oj是個很棒能訓練邏輯 及 熟悉解題的方法
final preoject : 只有最後final project才真正有在資工系的感覺，是要求做一個戰機遊戲，使用的是allegro套件(但現在大多開發遊戲的都用unity，跟本沒人在用allegro)，用c語法搭配allegro可以寫出來，會給一開始的模板，之後講解allegro的一些使用概念，之後會有hackthon，基本上教你如何寫出他最終評分標準的一些基本功能
最後評分是由助教評分，評分標準會分成基本分跟進階分(介紹allegro就會講解),就是把你做的成品demo給助教看，跟他說你做了哪些功能，哪裡你覺得很特別 然後基本上大家分數差不多，因為創意分數占分少(加上又是主觀評分)，只要功能有出來就大家分數差不多 大多數的人都是前三天才開始動筆，三天就能寫好
考試  每週小考: 2小時 每週上機考，內容是作業題目/作業題目修改偶爾有全新題目，但考得觀念就是作業題用到的觀念跟上課講的進度內容  前幾周很平易近人，可能一部分因為內容簡單，作業簡單 但到中間開始會有需要時間思考，到後面會變得蠻難的(可能想法簡單但實際用程設實作出來不易)
時間拿捏很重要，要懂得時間分配，跟適時果斷放棄某一題之類的
 期中期末: 3小時 一學期三次期中，一樣會有期中練習題，基本上考試會有一題跟作業題一樣(基本分)，其他就是作業變形題或全新的題目  大多都會出不來，很常會延長考試時間，但通常不會有很多滿分的人
調分:  會調但沒有到調爆  老師很和善很喜歡跟學生互動，或私下聊天，而且記性非常好 助教也都很和善，作業題寫不出來可以寄信問問，或是有TA time也可以當場去請教助教
心得: 老師上課都用ppt講解，並會把ppt跟上課講解的例題code一併放在學習平台上
會逐行講解code 但上課不會實際打code，也不會在電腦教室上機上課
上課內容會從最基本的c語法教起，後面會提到recursion迴圈，會開始進到一些進階難的題目 再之後就是動態陣列跟link list，也是會應用這兩個概念去帶題目， 難，但融會貫通後就會比較容易，但我自己的感覺是，要真正融會貫通很難，可能遇到相似題目會解，但稍微改一下就不知道要怎麼下手了
  學到如何打oj，學到一些程設解題的技巧，學到如何用allegro寫小遊戲
  可翹課嗎?可以 ，但偶爾他上課會抽同學回答問題，(但被抽到卻沒有到的同學好像也不會怎樣??)
  困境: 剛進去就會遇到不少程設很厲害的人，但沒辦法他們比我們多打了3年的code，所以解題思路一定不及他們，會很挫折，尤其是上機考出不來的時候，或是大家都出不來但你比大家還低分
 問題:    無法寫出一個很通用的程式，會需要考慮很多額外狀況
  或是少考慮條件</description>
    </item>
    
  </channel>
</rss>
